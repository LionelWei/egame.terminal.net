apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

def packageName = 'cn.egame.sdk'
def libraryVersion = '2.0.1'
def artifactName = 'egamenet'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 2
        versionName "1.0.1"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    compile 'com.orhanobut:logger:1.15'
    compile 'com.google.code.gson:gson:2.8.0'
}

task taskJar(type: Jar, dependsOn: ['build']) { //, dependsOn: [unpackJars] , dependsOn: [taskBuild]

    baseName 'egame.terminal.lib.net_' + new Date().format('yyyyMMdd') + '_' + 'release'

    from 'build/intermediates/classes/release'
    destinationDir = file('build/libs/release')
    exclude('**/BuildConfig.class', '**/R.class')
//去掉R$开头的文件
    exclude { it.name.startsWith('R$'); }
    exclude { it.name.startsWith('Test'); }

}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

artifactoryPublish {
    dependsOn taskJar
}

//artifacts {
//    archives sourceJar
//}

publishing {
    publications {
        aar(MavenPublication) {
            groupId = packageName
            artifactId = artifactName
            version = libraryVersion
            artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"
            artifact sourceJar
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each { dependency ->
                    if (dependency.group != null && !dependency.group.contains('gson')) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                    }
                }
            }
        }
    }
}


artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        defaults {
            // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
            publications('aar')
            publishArtifacts = true
            // Properties to be attached to the published artifacts.
            properties = ['qa.level': 'basic', 'dev.team': 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }

        repository {
            repoKey = libraryVersion.endsWith('SNAPSHOT') ? 'gradle-dev-local' : 'gradle-release-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}